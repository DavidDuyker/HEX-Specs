function () { const e = document.createElement("link").relList; if (e && e.supports && e.supports("modulepreload")) return; for (const t of document.querySelectorAll('link[rel="modulepreload"]')) c(t); new MutationObserver(t => { for (const o of t) if (o.type === "childList") for (const u of o.addedNodes) u.tagName === "LINK" && u.rel === "modulepreload" && c(u) }).observe(document, { childList: !0, subtree: !0 }); function r(t) { const o = {}; return t.integrity && (o.integrity = t.integrity), t.referrerPolicy && (o.referrerPolicy = t.referrerPolicy), t.crossOrigin === "use-credentials" ? o.credentials = "include" : t.crossOrigin === "anonymous" ? o.credentials = "omit" : o.credentials = "same-origin", o } function c(t) { if (t.ep) return; t.ep = !0; const o = r(t); fetch(t.href, o) } })(); function p(n, e) { const r = g(n), c = g(e), t = f(r), o = f(c), u = (Math.max(t, o) + .05) / (Math.min(t, o) + .05); return Number(u.toFixed(2)) } function g(n) { const e = parseInt(n.slice(1, 3), 16) / 255, r = parseInt(n.slice(3, 5), 16) / 255, c = parseInt(n.slice(5, 7), 16) / 255; return [e, r, c] } function f([n, e, r]) { const [c, t, o] = [n, e, r].map(u => u <= .03928 ? u / 12.92 : Math.pow((u + .055) / 1.055, 2.4)); return .2126 * c + .7152 * t + .0722 * o } function b(n, e) { return 0 } let s = "#000000", l = "#FFFFFF", y = null, a = "none"; function d(n, e) { e === "foreground" ? s = n : l = n, v(), m() } function v() { const n = p(s, l), e = document.getElementById("WCAGtext"); e && (e.textContent = `${n}`); const r = b(), c = document.getElementById("APCAtext"); c && (c.textContent = `${r}`) } function m() { document.documentElement.style.setProperty("--foreground", s), document.documentElement.style.setProperty("--background", l), document.querySelector("#foregroundSelector input").value = s, document.querySelector("#backgroundSelector input").value = l } function i(n) { a = n; const e = document.getElementById("foreground"), r = document.getElementById("background"); if (!e || !r) { console.error("Could not find foreground or background elements"); return } a === "foreground" ? (e.classList.add("active"), r.classList.remove("active")) : a === "background" ? (r.classList.add("active"), e.classList.remove("active")) : (e.classList.remove("active"), r.classList.remove("active")) } function L(n) { const e = n.data.pluginMessage; if (e) switch (e.type) { case "selectionChange": console.log("Selection changed:", e.selectionColor), d(e.selectionColor, a === "foreground" ? "foreground" : "background"); break; default: console.log("Unknown message type", e.type) } } document.addEventListener("DOMContentLoaded", () => { console.log("foreground", s, "background", l, "contrast", y, "selection mode", a), d(s, "foreground"), d(l, "background"); const n = document.getElementById("foreground"), e = document.getElementById("background"); n && e && (n.addEventListener("click", () => i("foreground")), e.addEventListener("click", () => i("background"))), i("foreground"); const r = document.getElementById("foregroundSelector"), c = document.getElementById("backgroundSelector"); r && c && (r.addEventListener("submit", t => { t.preventDefault(); const o = r.querySelector("input"); o && (console.log("Form 1 submitted with value:", o.value), d(o.value, "foreground")) }), c.addEventListener("submit", t => { t.preventDefault(); const o = c.querySelector("input"); o && (console.log("Form 2 submitted with value:", o), d(o.value, "background")) })), window.onmessage = L, m() });